# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AlbumGQL {
  name: String!
  resourceID: ID!
  songs: [SongGQL!]!
}

input CreateSourceInput {
  name: String!
  path: String!
}

type MediaGQL {
  mimeType: String
  path: String!
  resourceID: ID!
  size: Int!
  sourceResourceID: ID!
}

type Mutation {
  """
  Add a new source, must be an admin.The source is not scanned automatically.
  """
  createSource(data: CreateSourceInput!): SourceGQL

  """
  Remove a source, must be admin, returns success.Also removes all resources associated with the source.Must be admin.
  """
  deleteSource(resourceID: String!): Boolean!

  """Delete a user, returns success."""
  deleteUser(userID: String!): Boolean

  """
  Check whether the client is signed in, ensures theauthToken cookie (httpOnly) is present in the database andassociated with a user.
  """
  isSignedIn: UserGQL

  """Scans the given source, returns success.Must be admin."""
  scanSource(resourceID: String!): Boolean!

  """
  Sign into the application, if the supplied credentialsare correct, the authToken httpOnly cookie is set.
  """
  signIn(data: SignInInput!): UserGQL

  """Sign out of the application, revoking authToken."""
  signOut: Boolean!

  """
  Sign out of the application on all currentlyauthorized clients, including the client sending the request.Required to sign in again.
  """
  signOutAll(data: SignInInput!): Boolean!

  """
  Sign up, creating a new user/account, and signing inthe user automatically. The first account created is automaticallyset as an admin.
  """
  signUp(data: SignUpInput!): UserGQL

  """
  Update the users password. Requires the client tosign-in again (i.e provide username & password).
  """
  updatePassword(data: SignInInput!): Boolean!
}

type Query {
  """Query a specific album."""
  album(resourceID: String!): AlbumGQL

  """Query all albums the user has access to."""
  albums: [AlbumGQL!]

  """Query a specific song."""
  song(resourceID: String!): SongGQL

  """Query all songs the user has access to."""
  songs(sourceResourceID: String): [SongGQL!]

  """Query a source, must have permissions to access to it."""
  source(resourceID: String!): SourceGQL

  """
  Query all sources, returns those which the user haspermission to access.
  """
  sources: [SourceGQL!]

  """Query a user, must be logged in."""
  user(userID: String!): UserGQL

  """Query all users, must be an admin."""
  users: [UserGQL!]
}

type ScanGQL {
  changesAdd: Int
  changesRemove: Int
  endTime: Timestamp
  scanID: ID!
  startTime: Timestamp!
}

input SignInInput {
  password: String!
  username: String!
}

input SignUpInput {
  details: UserDetailsInput!
  password: String!
  username: String!
}

type SongGQL {
  codec: String
  diskNo: Int
  diskOf: Int
  duration: Float
  lossless: Boolean
  media: MediaGQL!
  mediaResourceID: ID!
  releaseCountry: String
  releaseFormat: String
  title: String!
  trackNo: Int
  trackOf: Int
  year: Int
}

type SourceGQL {
  mediaCount: Int!
  name: String!
  path: String!
  resourceID: ID!
  scanUnderway: Boolean!
  scans: [ScanGQL!]!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type UserDetailsGQL {
  email: String!
  realName: String!
}

input UserDetailsInput {
  email: String!
  realName: String!
}

type UserGQL {
  adminPriority: Int
  details: UserDetailsGQL!
  userID: ID!
  username: String!
}

# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddSourceInput {
  name: String!
  path: String!
}

type AuthResponse {
  success: Boolean!
}

type MediaGQL {
  mime_type: String
  path: String!
  resource_id: ID!
  size: Int!
  source_resource_id: ID!
}

type Mutation {
  """
  Add a new source, must be an admin.The source is not scanned automatically.
  """
  addSource(data: AddSourceInput!): SourceGQL

  """Delete a user, returns success."""
  deleteUser(user_id: String!): Boolean

  """
  Check whether the client is signed in, ensures theauthToken cookie (httpOnly) is present in the database andassociated with a user.
  """
  isSignedIn: UserGQL

  """
  Remove a source, must be admin, returns success.Also removes all resources associated with the source.Must be admin.
  """
  removeSource(resource_id: String!): Boolean!

  """Scans the given source, returns success.Must be admin."""
  scanSource(resource_id: String!): Boolean!

  """
  Sign into the application, if the supplied credentialsare correct, the authToken httpOnly cookie is set.
  """
  signIn(data: SignInInput!): UserGQL

  """Sign out of the application, revoking authToken."""
  signOut: AuthResponse!

  """
  Sign out of the application on all currentlyauthorized clients, including the client sending the request.Required to sign in again.
  """
  signOutAll(data: SignInInput!): AuthResponse!

  """
  Sign up, creating a new user/account, and signing inthe user automatically. The first account created is automaticallyset as an admin.
  """
  signUp(data: SignUpInput!): UserGQL

  """
  Update the users password. Requires the client tosign-in again (i.e provide username & password).
  """
  updatePassword(data: SignInInput!): AuthResponse!
}

type Query {
  """Query a user, must be logged in."""
  song(resource_id: String!): SongGQL

  """
  Query all songs the user has access to.Can optionally limit results to songs in a specific source.
  """
  songs(source_resource_id: String): [SongGQL!]

  """Query a source, must have permissions to access to it."""
  source(resource_id: String!): SourceGQL

  """
  Query all sources, returns those which the user haspermission to access.
  """
  sources: [SourceGQL!]

  """Query a user, must be logged in."""
  user(user_id: String!): UserGQL

  """Query all users, must be an admin."""
  users: [UserGQL!]
}

type ScanGQL {
  changes_add: Int
  changes_remove: Int
  end_timestamp: Timestamp
  scan_id: ID!
  start_timestamp: Timestamp!
}

input SignInInput {
  password: String!
  username: String!
}

input SignUpInput {
  details: UserDetailsInput!
  password: String!
  username: String!
}

type SongGQL {
  media: MediaGQL!
  media_resource_id: ID!
}

type SourceGQL {
  name: String!
  path: String!
  resource_id: ID!
  scan_underway: Boolean!
  scans: [ScanGQL!]!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type UserDetailsGQL {
  email: String!
  real_name: String!
}

input UserDetailsInput {
  email: String!
  real_name: String!
}

type UserGQL {
  adminPriority: Float
  details: UserDetailsGQL
  user_id: ID!
  username: String!
}
